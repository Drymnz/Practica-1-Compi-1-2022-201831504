
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.practica1compiladores12022.JflexYCup;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.example.practica1compiladores12022.Array.*;
import com.example.practica1compiladores12022.Grafica.*;
import com.example.practica1compiladores12022.Resportes.ReportesOperadoresMatematicos;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\021\003\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\025\002\000\002\020\006\000\002\020\003\000" +
    "\002\020\003\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\003\000\002\012" +
    "\010\000\002\013\010\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\003\000\002" +
    "\005\006\000\002\005\006\000\002\004\010\000\002\006" +
    "\010\000\002\007\006\000\002\010\006\000\002\015\006" +
    "\000\002\014\010\000\002\024\005\000\002\024\003\000" +
    "\002\016\007\000\002\022\005\000\002\022\003\000\002" +
    "\023\005\000\002\023\003\000\002\026\002\000\002\002" +
    "\010\000\002\027\002\000\002\002\010\000\002\002\003" +
    "\000\002\002\003\000\002\017\010\000\002\017\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\012\002\uffd2\003\004\021\006\026\007\001" +
    "\002\000\004\002\uffd4\001\002\000\004\002\175\001\002" +
    "\000\006\022\016\023\017\001\002\000\004\013\011\001" +
    "\002\000\004\002\uffd5\001\002\000\004\040\012\001\002" +
    "\000\004\014\013\001\002\000\004\005\014\001\002\000" +
    "\006\002\uffd2\026\007\001\002\000\004\002\uffd3\001\002" +
    "\000\004\017\uffd9\001\002\000\004\017\uffd7\001\002\000" +
    "\004\017\021\001\002\000\022\020\030\024\025\025\035" +
    "\031\036\032\032\033\033\034\027\035\040\001\002\000" +
    "\022\020\030\024\025\025\035\031\036\032\032\033\033" +
    "\034\027\035\040\001\002\000\022\020\030\024\025\025" +
    "\035\031\036\032\032\033\033\034\027\035\040\001\002" +
    "\000\012\002\uffd2\003\004\021\006\026\007\001\002\000" +
    "\004\004\136\001\002\000\022\020\030\024\025\025\035" +
    "\031\036\032\032\033\033\034\027\035\040\001\002\000" +
    "\004\004\132\001\002\000\012\002\uffe9\003\uffe9\021\uffe9" +
    "\026\uffe9\001\002\000\022\020\030\024\025\025\035\031" +
    "\036\032\032\033\033\034\027\035\040\001\002\000\004" +
    "\004\124\001\002\000\004\004\117\001\002\000\022\020" +
    "\030\024\025\025\035\031\036\032\032\033\033\034\027" +
    "\035\040\001\002\000\004\004\101\001\002\000\004\004" +
    "\047\001\002\000\022\020\030\024\025\025\035\031\036" +
    "\032\032\033\033\034\027\035\040\001\002\000\004\004" +
    "\043\001\002\000\022\020\030\024\025\025\035\031\036" +
    "\032\032\033\033\034\027\035\040\001\002\000\012\002" +
    "\uffef\003\uffef\021\uffef\026\uffef\001\002\000\004\040\044" +
    "\001\002\000\004\005\045\001\002\000\022\020\uffe4\024" +
    "\uffe4\025\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\001\002\000\012\002\ufff0\003\ufff0\021\ufff0\026\ufff0\001" +
    "\002\000\004\015\050\001\002\000\004\040\052\001\002" +
    "\000\004\016\077\001\002\000\006\006\053\016\uffda\001" +
    "\002\000\010\013\056\036\061\037\057\001\002\000\004" +
    "\016\uffdb\001\002\000\006\006\075\016\uffdc\001\002\000" +
    "\010\013\056\036\061\037\057\001\002\000\024\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\016" +
    "\ufff8\020\ufff8\001\002\000\020\005\000\006\000\007\064" +
    "\010\065\011\062\012\063\016\000\001\002\000\024\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9" +
    "\016\ufff9\020\ufff9\001\002\000\010\013\056\036\061\037" +
    "\057\001\002\000\010\013\056\036\061\037\057\001\002" +
    "\000\010\013\056\036\061\037\057\001\002\000\010\013" +
    "\056\036\061\037\057\001\002\000\024\005\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\011\062\012\063\014\ufffe\016\ufffe\020" +
    "\ufffe\001\002\000\024\005\uffff\006\uffff\007\uffff\010\uffff" +
    "\011\062\012\063\014\uffff\016\uffff\020\uffff\001\002\000" +
    "\024\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\014\ufffc\016\ufffc\020\ufffc\001\002\000\024\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\014\ufffd\016\ufffd" +
    "\020\ufffd\001\002\000\014\007\064\010\065\011\062\012" +
    "\063\014\ufffb\001\002\000\004\014\074\001\002\000\024" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\014" +
    "\ufffa\016\ufffa\020\ufffa\001\002\000\010\013\056\036\061" +
    "\037\057\001\002\000\004\016\uffdd\001\002\000\004\005" +
    "\100\001\002\000\022\020\uffe6\024\uffe6\025\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\001\002\000\004\015" +
    "\102\001\002\000\004\017\105\001\002\000\006\006\114" +
    "\016\uffdf\001\002\000\004\016\112\001\002\000\010\013" +
    "\056\036\061\037\057\001\002\000\014\006\107\007\064" +
    "\010\065\011\062\012\063\001\002\000\010\013\056\036" +
    "\061\037\057\001\002\000\014\007\064\010\065\011\062" +
    "\012\063\020\111\001\002\000\006\006\uffde\016\uffde\001" +
    "\002\000\004\005\113\001\002\000\026\020\uffe1\024\uffe1" +
    "\025\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\001\002\000\004\017\105\001\002\000\004" +
    "\016\uffe0\001\002\000\012\002\uffec\003\uffec\021\uffec\026" +
    "\uffec\001\002\000\006\041\121\042\120\001\002\000\004" +
    "\005\123\001\002\000\004\005\122\001\002\000\022\020" +
    "\uffe8\024\uffe8\025\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\001\002\000\022\020\uffe7\024\uffe7\025\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\001\002\000\004" +
    "\015\125\001\002\000\010\013\056\036\061\037\057\001" +
    "\002\000\004\016\127\001\002\000\004\005\130\001\002" +
    "\000\022\020\uffe5\024\uffe5\025\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\001\002\000\012\002\uffed\003\uffed" +
    "\021\uffed\026\uffed\001\002\000\010\013\056\036\061\037" +
    "\057\001\002\000\004\005\134\001\002\000\022\020\uffe3" +
    "\024\uffe3\025\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\001\002\000\012\002\uffea\003\uffea\021\uffea\026\uffea" +
    "\001\002\000\004\040\137\001\002\000\004\005\140\001" +
    "\002\000\026\020\uffe2\024\uffe2\025\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\001\002\000" +
    "\004\002\uffd6\001\002\000\012\002\uffee\003\uffee\021\uffee" +
    "\026\uffee\001\002\000\012\002\uffeb\003\uffeb\021\uffeb\026" +
    "\uffeb\001\002\000\004\017\145\001\002\000\014\020\150" +
    "\024\025\025\035\027\147\030\146\001\002\000\004\004" +
    "\170\001\002\000\004\004\163\001\002\000\012\002\ufff3" +
    "\003\ufff3\021\ufff3\026\ufff3\001\002\000\014\020\150\024" +
    "\025\025\035\027\147\030\146\001\002\000\012\002\uffd2" +
    "\003\004\021\006\026\007\001\002\000\014\020\150\024" +
    "\025\025\035\027\147\030\146\001\002\000\014\020\150" +
    "\024\025\025\035\027\147\030\146\001\002\000\014\020" +
    "\150\024\025\025\035\027\147\030\146\001\002\000\012" +
    "\002\ufff6\003\ufff6\021\ufff6\026\ufff6\001\002\000\012\002" +
    "\ufff7\003\ufff7\021\ufff7\026\ufff7\001\002\000\012\002\ufff5" +
    "\003\ufff5\021\ufff5\026\ufff5\001\002\000\004\002\uffd8\001" +
    "\002\000\012\002\ufff4\003\ufff4\021\ufff4\026\ufff4\001\002" +
    "\000\004\015\164\001\002\000\004\040\052\001\002\000" +
    "\004\016\166\001\002\000\004\005\167\001\002\000\014" +
    "\020\ufff2\024\ufff2\025\ufff2\027\ufff2\030\ufff2\001\002\000" +
    "\004\015\171\001\002\000\010\013\056\036\061\037\057" +
    "\001\002\000\004\016\173\001\002\000\004\005\174\001" +
    "\002\000\014\020\ufff1\024\ufff1\025\ufff1\027\ufff1\030\ufff1" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\006\002\004\017\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\014\001\001\000\002\001\001" +
    "\000\004\026\143\001\001\000\004\027\017\001\001\000" +
    "\002\001\001\000\022\003\023\004\022\005\030\006\033" +
    "\007\021\010\025\014\036\015\040\001\001\000\022\003" +
    "\142\004\022\005\030\006\033\007\021\010\025\014\036" +
    "\015\040\001\001\000\022\003\141\004\022\005\030\006" +
    "\033\007\021\010\025\014\036\015\040\001\001\000\006" +
    "\002\140\017\007\001\001\000\002\001\001\000\022\003" +
    "\134\004\022\005\030\006\033\007\021\010\025\014\036" +
    "\015\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\130\004\022\005\030\006\033\007\021\010\025" +
    "\014\036\015\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\115\004\022\005\030\006\033\007\021" +
    "\010\025\014\036\015\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\045\004\022\005\030\006\033" +
    "\007\021\010\025\014\036\015\040\001\001\000\002\001" +
    "\001\000\022\003\041\004\022\005\030\006\033\007\021" +
    "\010\025\014\036\015\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\057\021\054" +
    "\022\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\070\001\001\000\004\020" +
    "\067\001\001\000\004\020\066\001\001\000\004\020\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\057\021\054\022" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\102\024\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\105" +
    "\001\001\000\002\001\001\000\004\020\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\102\024\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\057\021\054\022\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\057\021\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\011\151\012\152\013\150\014\153\015\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\011\161\012\152\013\150\014\153\015\154\001\001" +
    "\000\006\002\160\017\007\001\001\000\014\011\157\012" +
    "\152\013\150\014\153\015\154\001\001\000\014\011\156" +
    "\012\152\013\150\014\153\015\154\001\001\000\014\011" +
    "\155\012\152\013\150\014\153\015\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\057\021\054\022\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
	public parser(Lexema lexer) {
        super(lexer);
        }

        public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        }

        public void unrecovered_syntax_error(Symbol cur_token) {
            if (cur_token.sym == sym.EOF) {
             System.out.println("public void unrecoveredsyntax_error");
            }
        }
/**
     * ***CODE*******
     */
    private ArrayList<ReportesOperadoresMatematicos> listadoReportesMatemtaicos = new ArrayList<>();
    private ArrayList<Grafica> listadoGrafica = new ArrayList<>();
    //valors para crear graficas
    private ArrayList<String> listadoEjeX = new ArrayList<>(); //if registra[0] == true
    private ArrayList<String> listadoEtiqueta = new ArrayList<>(); //if registra[0] == true
    private ArrayDouble listadoValores = new ArrayDouble();//if registra[1] == true
    private ArrayDouble listadoEjeY = new ArrayDouble();//if registra[1] == true
    private ArrayOrderedPair listadoUnir = new ArrayOrderedPair();//if registra[2] == true
    private boolean[] registrar = {true, true, true};
    private boolean[] tipoGrafica = {false, false};//tipoGrafica[0]=BARRAS , tipoGrafica[1]PIE
    private double total;
    private String titulo;
    private String tipo;
    private String extra;

    //agregar grafica al listado
    private void addGraph() {
        Grafica add = null;
        boolean requisitosBasicos = (!titulo.isEmpty()) && (listadoUnir!=null) && (listadoEjeX!=null | listadoEtiqueta!=null) && (listadoEjeY!=null | listadoValores!=null);
        //add Barra
        if (tipoGrafica[0] & requisitosBasicos) {
            add = new Barras(titulo, listadoUnir, listadoEjeY, listadoEjeX);
        }
        //add Pie
        if (tipoGrafica[1] & requisitosBasicos) {
            int cantidadPorcentaje = (tipo.equalsIgnoreCase("Porcentaje")) ? 0 : (tipo.equalsIgnoreCase("Cantidad")) ? 1 : 2;
            switch ((total == 0 && extra.isEmpty() && cantidadPorcentaje != 2) ? 0 : (total != 0 && extra.isEmpty() && cantidadPorcentaje != 2) ? 1 : (!extra.isEmpty() && total == 0 && cantidadPorcentaje != 2) ? 2 : (cantidadPorcentaje != 2) ? 3 : 4) {
                case 0:
                    add = new Pie((cantidadPorcentaje == 0) ? Pie.posible.PORCENTAJE : Pie.posible.CANTIDAD, titulo +"", listadoUnir, listadoValores, listadoEtiqueta);
                    break;
                case 1:
                    add = new Pie((cantidadPorcentaje == 0) ? Pie.posible.PORCENTAJE : Pie.posible.CANTIDAD, total, titulo +"", listadoUnir, listadoValores, listadoEtiqueta);
                    break;
                case 2:
                    add = new Pie((cantidadPorcentaje == 0) ? Pie.posible.PORCENTAJE : Pie.posible.CANTIDAD, extra, titulo +"", listadoUnir, listadoValores, listadoEtiqueta);
                    break;
                case 3:
                    add = new Pie((cantidadPorcentaje == 0) ? Pie.posible.PORCENTAJE : Pie.posible.CANTIDAD, total, extra +"", titulo +"", listadoUnir, listadoValores, listadoEtiqueta);
                    break;
                default:
                    System.out.println("NO SE ENCONTRO NADA PARA AÑADIR AL LISTADO GRAFICA");
                    throw new AssertionError();
            }
        }
        if (add == null) {
            System.out.println("NO SE ENCONTRO NADA PARA AÑADIR AL LISTADO GRAFICA");
        } else {
            listadoGrafica.add(add);
        }
    }
    //En esta parte regresa los atributos a su estado inicial

    private void restoreString() {
        total = 0;
        titulo = "";
        tipo = "";
        extra = "";
        listadoEjeX = new ArrayList<>();
        listadoEjeY = new ArrayDouble();
        listadoValores = new ArrayDouble();
        listadoEtiqueta = new ArrayList<>();
        listadoUnir = new ArrayOrderedPair();
        registrar[0] = true;
        registrar[2] = true;
        registrar[1] = true;
        tipoGrafica[0] = false;
        tipoGrafica[1] = false;
    }
// solo prubas en terminal

    private void printString() {
        System.out.println("**********" + "titulo>>>" + titulo + "*********************************");
        System.out.println("total>>>" + total);
        System.out.println("tipo>>" + tipo);
        System.out.println("extra>>>" + extra);
        System.out.println("listadoEjeX>>>" + listadoEjeX.toString());
        System.out.println("listadoEjeY>>>" + listadoEjeY.toString());
        System.out.println("listadoValores>>>" + listadoValores.toString());
        System.out.println("listadoEtiqueta>>>" + listadoEtiqueta.toString());
        System.out.println("listadoReportesMatemtaicos>>>" + listadoReportesMatemtaicos.toString());
        for (int i = 0; i < listadoGrafica.size(); i++) {
            System.out.println("listadoGrafica>>>" + listadoGrafica.get(i).toString());
        }
        System.out.println("**********************************************************************");
    }

    public ArrayList<ReportesOperadoresMatematicos> getListadoReportesMatemtaicos() {
        return listadoReportesMatemtaicos;
    }

    public ArrayList<Grafica> getListadoGrafica() {
        return listadoGrafica;
    }
    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= i EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // j ::= o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = a;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("j",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // o ::= o SUMAR o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    int val1= Integer.parseInt(a);
                    int val2= Integer.parseInt(b);
                    int r = val1+val2;
                    RESULT = String.valueOf(r); 
 listadoReportesMatemtaicos.add(new ReportesOperadoresMatematicos("SUMAR", aleft, aright, "val1 + val2 "));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // o ::= o RESTAR o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 int val1= Integer.parseInt(a);
                    int val2= Integer.parseInt(b);
                    int r = val1-val2;
                    RESULT = String.valueOf(r); 
 listadoReportesMatemtaicos.add(new ReportesOperadoresMatematicos("RESTAR", aleft, aright, "val1 - val2 "));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // o ::= o DIVIDIR o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 int val1= Integer.parseInt(a);
                    int val2= Integer.parseInt(b);
                    int r = val1/val2;
                    RESULT = String.valueOf(r); 
listadoReportesMatemtaicos.add(new ReportesOperadoresMatematicos("DIVIDIR", aleft, aright, "val1 / val2 "));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // o ::= o MULTIPLICAR o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 int val1= Integer.parseInt(a);
                    int val2= Integer.parseInt(b);
                    int r = val1*val2;
                    RESULT = String.valueOf(r); 
listadoReportesMatemtaicos.add(new ReportesOperadoresMatematicos("MULTIPLICAR", aleft, aright, "val1 * val2 "));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // o ::= PARENTESIS_A o NT$0 PARENTESIS_C 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // o ::= ENTERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // o ::= DECIMAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // b ::= u b 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // b ::= t b 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // b ::= x b 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // b ::= y b 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // b ::= LLAVE_C 
            {
              Object RESULT =null;
		
            addGraph();
            //printString();//solo pruevas
            restoreString();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // x ::= EJEX DOBLEPUNTO CORCHETE_A v CORCHETE_C PUNTOYCOMA 
            {
              Object RESULT =null;
		registrar[0]=false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("x",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // y ::= EJEY DOBLEPUNTO CORCHETE_A w CORCHETE_C PUNTOYCOMA 
            {
              Object RESULT =null;
		registrar[1]=false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("y",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // p ::= u p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // p ::= t p 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // p ::= q p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // p ::= g p 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // p ::= a p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // p ::= r p 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // p ::= l p 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // p ::= LLAVE_C 
            {
              Object RESULT =null;
		
            addGraph();
            //printString();//solo pruevas
            restoreString();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // g ::= TIPO DOBLEPUNTO PORCENTAJE PUNTOYCOMA 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		tipo=text;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("g",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // g ::= TIPO DOBLEPUNTO CANTIDAD PUNTOYCOMA 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		tipo=text;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("g",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // q ::= ETIQUETAS DOBLEPUNTO CORCHETE_A v CORCHETE_C PUNTOYCOMA 
            {
              Object RESULT =null;
		registrar[0]=false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("q",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // a ::= VALORES DOBLEPUNTO CORCHETE_A w CORCHETE_C PUNTOYCOMA 
            {
              Object RESULT =null;
		registrar[1]=false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // r ::= EXTRA DOBLEPUNTO TEXT PUNTOYCOMA 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		extra=text.substring(1, text.length()-1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // l ::= TOTAL DOBLEPUNTO j PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		total=Double.valueOf(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // t ::= TITULO DOBLEPUNTO TEXT PUNTOYCOMA 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		titulo=text.substring(1, text.length()-1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // u ::= UNIR DOBLEPUNTO CORCHETE_A z CORCHETE_C PUNTOYCOMA 
            {
              Object RESULT =null;
		registrar[2]=false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("u",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // z ::= d COMA z 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("z",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // z ::= d 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("z",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // d ::= LLAVE_A o COMA o LLAVE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if (registrar[2]){ listadoUnir.add(Double.valueOf(a), Double.valueOf(b));}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("d",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // w ::= j COMA w 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                if(registrar[1] && tipoGrafica[0]) {listadoEjeY.add(Double.valueOf(a));}
                if(registrar[1] && tipoGrafica[1]) {listadoValores.add(Double.valueOf(a));}
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("w",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // w ::= j 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(registrar[1] && tipoGrafica[0]) {listadoEjeY.add(Double.valueOf(a));}
        if(registrar[1] && tipoGrafica[1]) {listadoValores.add(Double.valueOf(a));}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("w",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // v ::= TEXT COMA w 
            {
              String RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        if(registrar[1] && tipoGrafica[0]) {listadoEjeX.add(text);}
                        if(registrar[1] && tipoGrafica[1]) {listadoEtiqueta.add(text);}
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // v ::= TEXT 
            {
              String RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(registrar[1] && tipoGrafica[0]) {listadoEjeX.add(text);}
            if(registrar[1] && tipoGrafica[1]) {listadoEtiqueta.add(text);}
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$1 ::= 
            {
              Object RESULT =null;
tipoGrafica[0]=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // i ::= DEF BARRAS NT$1 LLAVE_A b i 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("i",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$2 ::= 
            {
              Object RESULT =null;
tipoGrafica[1]=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // i ::= DEF PIE NT$2 LLAVE_A p i 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("i",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // i ::= e 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("i",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // i ::= error 
            {
              Object RESULT =null;
		System.out.println("¡¡¡¡¡ERROR!!!!");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // e ::= EJECUTAR PARENTESIS_A TEXT PARENTESIS_C PUNTOYCOMA e 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // e ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
