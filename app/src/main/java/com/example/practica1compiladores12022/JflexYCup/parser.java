
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.practica1compiladores12022.JflexYCup;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.example.practica1compiladores12022.Array.*;
import com.example.practica1compiladores12022.Grafica.*;
import com.example.practica1compiladores12022.Resportes.ReportesOperadoresMatematicos;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\021\003\000\002\021" +
    "\003\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\025\002\000\002\020\006\000" +
    "\002\020\003\000\002\020\003\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\003\000\002\011\004\000\002\012\010\000\002\013\010" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\005" +
    "\006\000\002\005\006\000\002\004\010\000\002\006\010" +
    "\000\002\007\006\000\002\010\006\000\002\015\006\000" +
    "\002\014\010\000\002\024\005\000\002\024\003\000\002" +
    "\024\003\000\002\016\007\000\002\022\005\000\002\022" +
    "\003\000\002\023\005\000\002\023\003\000\002\023\002" +
    "\000\002\023\003\000\002\026\002\000\002\002\010\000" +
    "\002\027\002\000\002\002\010\000\002\002\003\000\002" +
    "\002\004\000\002\017\010\000\002\017\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\012\002\uffcc\003\004\021\006\026\007\001" +
    "\002\000\012\002\uffcc\003\004\021\006\026\007\001\002" +
    "\000\004\002\204\001\002\000\006\022\016\023\017\001" +
    "\002\000\004\013\011\001\002\000\004\002\uffcf\001\002" +
    "\000\004\040\012\001\002\000\004\014\013\001\002\000" +
    "\004\005\014\001\002\000\006\002\uffcc\026\007\001\002" +
    "\000\004\002\uffcd\001\002\000\004\017\uffd3\001\002\000" +
    "\004\017\uffd1\001\002\000\004\017\021\001\002\000\024" +
    "\003\033\020\030\024\025\025\036\031\037\032\032\033" +
    "\034\034\027\035\041\001\002\000\024\003\033\020\030" +
    "\024\025\025\036\031\037\032\032\033\034\034\027\035" +
    "\041\001\002\000\024\003\033\020\030\024\025\025\036" +
    "\031\037\032\032\033\034\034\027\035\041\001\002\000" +
    "\012\002\uffcc\003\004\021\006\026\007\001\002\000\004" +
    "\004\143\001\002\000\024\003\033\020\030\024\025\025" +
    "\036\031\037\032\032\033\034\034\027\035\041\001\002" +
    "\000\004\004\137\001\002\000\012\002\uffe7\003\uffe7\021" +
    "\uffe7\026\uffe7\001\002\000\024\003\033\020\030\024\025" +
    "\025\036\031\037\032\032\033\034\034\027\035\041\001" +
    "\002\000\004\004\131\001\002\000\024\003\033\020\030" +
    "\024\025\025\036\031\037\032\032\033\034\034\027\035" +
    "\041\001\002\000\004\004\123\001\002\000\024\003\033" +
    "\020\030\024\025\025\036\031\037\032\032\033\034\034" +
    "\027\035\041\001\002\000\004\004\104\001\002\000\004" +
    "\004\050\001\002\000\024\003\033\020\030\024\025\025" +
    "\036\031\037\032\032\033\034\034\027\035\041\001\002" +
    "\000\004\004\044\001\002\000\024\003\033\020\030\024" +
    "\025\025\036\031\037\032\032\033\034\034\027\035\041" +
    "\001\002\000\012\002\uffed\003\uffed\021\uffed\026\uffed\001" +
    "\002\000\004\040\045\001\002\000\004\005\046\001\002" +
    "\000\024\003\uffe1\020\uffe1\024\uffe1\025\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\034\uffe1\035\uffe1\001\002\000\012\002\uffee" +
    "\003\uffee\021\uffee\026\uffee\001\002\000\004\015\051\001" +
    "\002\000\010\003\053\016\uffd5\040\054\001\002\000\004" +
    "\016\102\001\002\000\004\016\uffd4\001\002\000\006\006" +
    "\055\016\uffd6\001\002\000\012\003\057\013\061\036\064" +
    "\037\062\001\002\000\004\016\uffd7\001\002\000\010\005" +
    "\uffff\006\uffff\016\uffff\001\002\000\006\006\100\016\uffd8" +
    "\001\002\000\010\013\061\036\064\037\062\001\002\000" +
    "\024\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\014\ufff7\016\ufff7\020\ufff7\001\002\000\020\005\000\006" +
    "\000\007\067\010\070\011\065\012\066\016\000\001\002" +
    "\000\024\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\014\ufff8\016\ufff8\020\ufff8\001\002\000\010\013\061" +
    "\036\064\037\062\001\002\000\010\013\061\036\064\037" +
    "\062\001\002\000\010\013\061\036\064\037\062\001\002" +
    "\000\010\013\061\036\064\037\062\001\002\000\024\005" +
    "\ufffd\006\ufffd\007\ufffd\010\ufffd\011\065\012\066\014\ufffd" +
    "\016\ufffd\020\ufffd\001\002\000\024\005\ufffe\006\ufffe\007" +
    "\ufffe\010\ufffe\011\065\012\066\014\ufffe\016\ufffe\020\ufffe" +
    "\001\002\000\024\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\ufffb\014\ufffb\016\ufffb\020\ufffb\001\002\000\024" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\014" +
    "\ufffc\016\ufffc\020\ufffc\001\002\000\014\007\067\010\070" +
    "\011\065\012\066\014\ufffa\001\002\000\004\014\077\001" +
    "\002\000\024\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\012\ufff9\014\ufff9\016\ufff9\020\ufff9\001\002\000\012\003" +
    "\057\013\061\036\064\037\062\001\002\000\004\016\uffd9" +
    "\001\002\000\004\005\103\001\002\000\024\003\uffe3\020" +
    "\uffe3\024\uffe3\025\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\001\002\000\004\015\105\001\002\000\006\003" +
    "\106\017\111\001\002\000\004\016\uffdb\001\002\000\004" +
    "\016\120\001\002\000\006\006\116\016\uffdc\001\002\000" +
    "\010\013\061\036\064\037\062\001\002\000\014\006\113" +
    "\007\067\010\070\011\065\012\066\001\002\000\010\013" +
    "\061\036\064\037\062\001\002\000\014\007\067\010\070" +
    "\011\065\012\066\020\115\001\002\000\006\006\uffda\016" +
    "\uffda\001\002\000\006\003\106\017\111\001\002\000\004" +
    "\016\uffdd\001\002\000\004\005\121\001\002\000\030\003" +
    "\uffde\020\uffde\024\uffde\025\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\035\uffde\001\002\000\012\002" +
    "\uffea\003\uffea\021\uffea\026\uffea\001\002\000\006\041\125" +
    "\042\124\001\002\000\004\005\127\001\002\000\004\005" +
    "\126\001\002\000\024\003\uffe5\020\uffe5\024\uffe5\025\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\001\002\000" +
    "\024\003\uffe4\020\uffe4\024\uffe4\025\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\001\002\000\012\002\uffe6\003" +
    "\uffe6\021\uffe6\026\uffe6\001\002\000\004\015\132\001\002" +
    "\000\012\003\057\013\061\036\064\037\062\001\002\000" +
    "\004\016\134\001\002\000\004\005\135\001\002\000\024" +
    "\003\uffe2\020\uffe2\024\uffe2\025\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\001\002\000\012\002\uffeb\003\uffeb" +
    "\021\uffeb\026\uffeb\001\002\000\012\003\057\013\061\036" +
    "\064\037\062\001\002\000\004\005\141\001\002\000\024" +
    "\003\uffe0\020\uffe0\024\uffe0\025\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\001\002\000\012\002\uffe8\003\uffe8" +
    "\021\uffe8\026\uffe8\001\002\000\004\040\144\001\002\000" +
    "\004\005\145\001\002\000\030\003\uffdf\020\uffdf\024\uffdf" +
    "\025\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\001\002\000\004\002\uffd0\001\002\000\012" +
    "\002\uffec\003\uffec\021\uffec\026\uffec\001\002\000\012\002" +
    "\uffe9\003\uffe9\021\uffe9\026\uffe9\001\002\000\004\017\152" +
    "\001\002\000\016\003\156\020\155\024\025\025\036\027" +
    "\154\030\153\001\002\000\004\004\177\001\002\000\004" +
    "\004\172\001\002\000\012\002\ufff2\003\ufff2\021\ufff2\026" +
    "\ufff2\001\002\000\016\003\156\020\155\024\025\025\036" +
    "\027\154\030\153\001\002\000\016\003\156\020\155\024" +
    "\025\025\036\027\154\030\153\001\002\000\012\002\uffcc" +
    "\003\004\021\006\026\007\001\002\000\016\003\156\020" +
    "\155\024\025\025\036\027\154\030\153\001\002\000\016" +
    "\003\156\020\155\024\025\025\036\027\154\030\153\001" +
    "\002\000\016\003\156\020\155\024\025\025\036\027\154" +
    "\030\153\001\002\000\012\002\ufff5\003\ufff5\021\ufff5\026" +
    "\ufff5\001\002\000\012\002\ufff6\003\ufff6\021\ufff6\026\ufff6" +
    "\001\002\000\012\002\ufff4\003\ufff4\021\ufff4\026\ufff4\001" +
    "\002\000\004\002\uffd2\001\002\000\012\002\ufff3\003\ufff3" +
    "\021\ufff3\026\ufff3\001\002\000\012\002\ufff1\003\ufff1\021" +
    "\ufff1\026\ufff1\001\002\000\004\015\173\001\002\000\010" +
    "\003\053\016\uffd5\040\054\001\002\000\004\016\175\001" +
    "\002\000\004\005\176\001\002\000\016\003\ufff0\020\ufff0" +
    "\024\ufff0\025\ufff0\027\ufff0\030\ufff0\001\002\000\004\015" +
    "\200\001\002\000\012\003\057\013\061\036\064\037\062" +
    "\001\002\000\004\016\202\001\002\000\004\005\203\001" +
    "\002\000\016\003\uffef\020\uffef\024\uffef\025\uffef\027\uffef" +
    "\030\uffef\001\002\000\004\002\001\001\002\000\004\002" +
    "\uffce\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\006\002\004\017\007\001\001\000\006\002" +
    "\204\017\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\014\001\001" +
    "\000\002\001\001\000\004\026\150\001\001\000\004\027" +
    "\017\001\001\000\002\001\001\000\022\003\023\004\022" +
    "\005\030\006\034\007\021\010\025\014\037\015\041\001" +
    "\001\000\022\003\147\004\022\005\030\006\034\007\021" +
    "\010\025\014\037\015\041\001\001\000\022\003\146\004" +
    "\022\005\030\006\034\007\021\010\025\014\037\015\041" +
    "\001\001\000\006\002\145\017\007\001\001\000\002\001" +
    "\001\000\022\003\141\004\022\005\030\006\034\007\021" +
    "\010\025\014\037\015\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\135\004\022\005\030\006\034" +
    "\007\021\010\025\014\037\015\041\001\001\000\002\001" +
    "\001\000\022\003\127\004\022\005\030\006\034\007\021" +
    "\010\025\014\037\015\041\001\001\000\002\001\001\000" +
    "\022\003\121\004\022\005\030\006\034\007\021\010\025" +
    "\014\037\015\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\046\004\022\005\030\006\034\007\021" +
    "\010\025\014\037\015\041\001\001\000\002\001\001\000" +
    "\022\003\042\004\022\005\030\006\034\007\021\010\025" +
    "\014\037\015\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\062" +
    "\021\057\022\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\073\001\001\000\004\020\072\001\001\000\004\020\071" +
    "\001\001\000\004\020\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\020\062\021\057\022\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\107\024\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\111\001\001\000" +
    "\002\001\001\000\004\020\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\107\024\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\062\021\057\022\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\062\021\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\157\012\160\013\156\014\161\015\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\170\012\160\013\156\014\161\015\162\001" +
    "\001\000\014\011\167\012\160\013\156\014\161\015\162" +
    "\001\001\000\006\002\166\017\007\001\001\000\014\011" +
    "\165\012\160\013\156\014\161\015\162\001\001\000\014" +
    "\011\164\012\160\013\156\014\161\015\162\001\001\000" +
    "\014\011\163\012\160\013\156\014\161\015\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\020\062\021\057\022\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
	public parser(Lexema lexer) {
        super(lexer);
        }

        public void syntax_error(Symbol cur_token) {
        //System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        //System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        if (registrar[3]){
            ErrorAnalisando nuevo = new ErrorAnalisando(cur_token.toString(), cur_token.left, cur_token.right, "Sintactico", "Ahi no va "+sym.terminalNames[cur_token.sym]);
            listError.add(nuevo);
        }
        registrar[3]=false;
        }

        public void unrecovered_syntax_error(Symbol cur_token) {
            if (cur_token.sym == sym.EOF) {
             System.out.println("public void unrecoveredsyntax_error!!!!!!!!!!!!!!");
            }
        }
    /**
     * ***CODE*******
     */
    public static ArrayList<ReportesOperadoresMatematicos> listadoReportesMatemtaicos = new ArrayList<>();
    private ArrayList<ErrorAnalisando> listError = new ArrayList<>();//if registra[3] == true
    private ArrayList<Grafica> listadoGrafica = new ArrayList<>();
    private ArrayList<Grafica> listadoGraficaPosible = new ArrayList<>();
    //valors para crear graficas
    //para cualquier grafica
    private ArrayOrderedPair listadoUnir = new ArrayOrderedPair();//if registra[2] == true
    private String titulo;
    private boolean[] registrar = {true, true, true,true};//arreglo para indicar que solo una ves analise el etributo
    private boolean[] tipoGrafica = {false, false};//tipoGrafica[0]=BARRAS , tipoGrafica[1]PIE
    //barras
    private ArrayList<String> listadoEjeX = new ArrayList<>(); //if registra[0] == true
    private ArrayDouble listadoEjeY = new ArrayDouble();//if registra[1] == true
    //pie
    private ArrayList<String> listadoEtiqueta = new ArrayList<>(); //if registra[0] == true
    private ArrayDouble listadoValores = new ArrayDouble();//if registra[1] == true
    private double total;
    private String tipo;
    private String extra;

    //agregar grafica al listado
    private void addGraph() {
        Grafica add = null;
        //los requisitos minimos de una grafica es tener titulo un par ordenado para valor y caracter y su listado de valores y listado de caracter
        boolean requisitosBasicos = (!titulo.isEmpty()) && (listadoUnir!=null) && (listadoEjeX!=null | listadoEtiqueta!=null) && (listadoEjeY!=null | listadoValores!=null);
        //add Barra
        if (tipoGrafica[0] & requisitosBasicos) {
            add = new Barras(titulo, listadoUnir, listadoEjeY, listadoEjeX);
        }
        //add Pie
        if (tipoGrafica[1] & requisitosBasicos) {
            int cantidadPorcentaje = (tipo.equalsIgnoreCase("Porcentaje")) ? 0 : (tipo.equalsIgnoreCase("Cantidad")) ? 1 : 2;
            switch ((total == 0 && extra.isEmpty() && cantidadPorcentaje != 2) ? 0 : (total != 0 && extra.isEmpty() && cantidadPorcentaje != 2) ? 1 : (!extra.isEmpty() && total == 0 && cantidadPorcentaje != 2) ? 2 : (cantidadPorcentaje != 2) ? 3 : 4) {
                case 0:
                    add = new Pie((cantidadPorcentaje == 0) ? Pie.posible.PORCENTAJE : Pie.posible.CANTIDAD, titulo +"", listadoUnir, listadoValores, listadoEtiqueta);
                    break;
                case 1:
                    add = new Pie((cantidadPorcentaje == 0) ? Pie.posible.PORCENTAJE : Pie.posible.CANTIDAD, total, titulo +"", listadoUnir, listadoValores, listadoEtiqueta);
                    break;
                case 2:
                    add = new Pie((cantidadPorcentaje == 0) ? Pie.posible.PORCENTAJE : Pie.posible.CANTIDAD, extra, titulo +"", listadoUnir, listadoValores, listadoEtiqueta);
                    break;
                case 3:
                    add = new Pie((cantidadPorcentaje == 0) ? Pie.posible.PORCENTAJE : Pie.posible.CANTIDAD, total, extra +"", titulo +"", listadoUnir, listadoValores, listadoEtiqueta);
                    break;
                default:
                    System.out.println("NO SE ENCONTRO NADA PARA AÑADIR AL LISTADO GRAFICA");
                    throw new AssertionError();
            }
        }
        if (add != null) listadoGraficaPosible.add(add);
    }
    //En esta metodo regresa los atributos a su estado inicial
    private void restoreString() {
        total = 0;
        titulo = "";
        tipo = "";
        extra = "";
        listadoEjeX = new ArrayList<>();
        listadoEjeY = new ArrayDouble();
        listadoValores = new ArrayDouble();
        listadoEtiqueta = new ArrayList<>();
        listadoUnir = new ArrayOrderedPair();
        registrar[0] = true;
        registrar[2] = true;
        registrar[1] = true;
        tipoGrafica[0] = false;
        tipoGrafica[1] = false;
    }
// solo prubas en terminal
    private void printString() {
        System.out.println("**********" + "titulo>>>" + titulo + "*********************************");
        System.out.println("total>>>" + total);
        System.out.println("tipo>>" + tipo);
        System.out.println("extra>>>" + extra);
        System.out.println("listadoEjeX>>>" + listadoEjeX.toString());
        System.out.println("listadoEjeY>>>" + listadoEjeY.toString());
        System.out.println("listadoValores>>>" + listadoValores.toString());
        System.out.println("listadoEtiqueta>>>" + listadoEtiqueta.toString());
        System.out.println("listadoReportesMatemtaicos>>>" + listadoReportesMatemtaicos.toString());
        for (int i = 0; i < listadoGrafica.size(); i++) {
            System.out.println("listadoGrafica>>>" + listadoGrafica.get(i).toString());
        }
        System.out.println("**********************************************************************");
    }
    // aqui lista la graficas que se va a pode graficar
    private void listarGraficas(String titulo){
        if (!listadoGraficaPosible.isEmpty()) {
            for (Grafica grafica : listadoGraficaPosible) {
                if (grafica.getTitulo().equalsIgnoreCase(titulo)){
                    listadoGrafica.add(grafica);
                }
            }
        }
    }

    public ArrayList<ReportesOperadoresMatematicos> getListadoReportesMatemtaicos() {
        return listadoReportesMatemtaicos;
    }

    public ArrayList<Grafica> getListadoGrafica() {
        return listadoGrafica;
    }

    public ArrayList<ErrorAnalisando> getListError() {

        return listError;
    }

    public static void setListadoReportesMatemtaicos(ArrayList<ReportesOperadoresMatematicos> listadoReportesMatemtaicos) {
        guia.listadoReportesMatemtaicos = listadoReportesMatemtaicos;
    }

    public void setListError(ArrayList<ErrorAnalisando> listError) {
        this.listError = listError;
    }

    public void setListadoGrafica(ArrayList<Grafica> listadoGrafica) {
        this.listadoGrafica = listadoGrafica;
    }
    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= i EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // j ::= o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = a;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("j",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // j ::= error 
            {
              String RESULT =null;
		registrar[3]=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("j",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // o ::= o SUMAR o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    double numeroUno= Double.valueOf(a);
                    double numeroDos= Double.valueOf(b);
                    double resultado = numeroUno-numeroDos;
                    RESULT = String.valueOf(resultado);
 listadoReportesMatemtaicos.add(new ReportesOperadoresMatematicos("SUMAR", aleft, aright, numeroUno+"+"+numeroDos));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // o ::= o RESTAR o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                double numeroUno= Double.valueOf(a);
                double numeroDos= Double.valueOf(b);
                double resultado = numeroUno-numeroDos;
                RESULT = String.valueOf(resultado);
 listadoReportesMatemtaicos.add(new ReportesOperadoresMatematicos("RESTAR", aleft, aright, numeroUno+"-"+numeroDos));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // o ::= o DIVIDIR o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    double numeroUno= Double.valueOf(a);
                    double numeroDos= Double.valueOf(b);
                    double resultado = numeroUno/numeroDos;
                    RESULT = String.valueOf(resultado);
listadoReportesMatemtaicos.add(new ReportesOperadoresMatematicos("DIVIDIR", aleft, aright, numeroUno+"/"+numeroDos));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // o ::= o MULTIPLICAR o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    double numeroUno= Double.valueOf(a);
                    double numeroDos= Double.valueOf(b);
                    double resultado = numeroUno*numeroDos;
                    RESULT = String.valueOf(resultado);
listadoReportesMatemtaicos.add(new ReportesOperadoresMatematicos("MULTIPLICAR", aleft, aright, numeroUno+"*"+numeroDos));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // o ::= PARENTESIS_A o NT$0 PARENTESIS_C 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // o ::= ENTERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // o ::= DECIMAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // b ::= u b 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // b ::= t b 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // b ::= x b 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // b ::= y b 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // b ::= LLAVE_C 
            {
              Object RESULT =null;
		
            addGraph();
            //printString();//solo pruevas
            restoreString();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // b ::= error b 
            {
              Object RESULT =null;
		registrar[3]=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // x ::= EJEX DOBLEPUNTO CORCHETE_A v CORCHETE_C PUNTOYCOMA 
            {
              Object RESULT =null;
		registrar[0]=false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("x",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // y ::= EJEY DOBLEPUNTO CORCHETE_A w CORCHETE_C PUNTOYCOMA 
            {
              Object RESULT =null;
		registrar[1]=false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("y",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // p ::= u p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // p ::= t p 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // p ::= q p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // p ::= g p 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // p ::= a p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // p ::= r p 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // p ::= l p 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // p ::= LLAVE_C 
            {
              Object RESULT =null;
		
            addGraph();
            //printString();//solo pruevas
            restoreString();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // p ::= error p 
            {
              Object RESULT =null;
		registrar[3]=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // g ::= TIPO DOBLEPUNTO PORCENTAJE PUNTOYCOMA 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		tipo=text;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("g",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // g ::= TIPO DOBLEPUNTO CANTIDAD PUNTOYCOMA 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		tipo=text;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("g",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // q ::= ETIQUETAS DOBLEPUNTO CORCHETE_A v CORCHETE_C PUNTOYCOMA 
            {
              Object RESULT =null;
		registrar[0]=false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("q",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // a ::= VALORES DOBLEPUNTO CORCHETE_A w CORCHETE_C PUNTOYCOMA 
            {
              Object RESULT =null;
		registrar[1]=false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // r ::= EXTRA DOBLEPUNTO TEXT PUNTOYCOMA 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		extra=text.substring(1, text.length()-1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // l ::= TOTAL DOBLEPUNTO j PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		total=Double.valueOf(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // t ::= TITULO DOBLEPUNTO TEXT PUNTOYCOMA 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		titulo=text.substring(1, text.length()-1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // u ::= UNIR DOBLEPUNTO CORCHETE_A z CORCHETE_C PUNTOYCOMA 
            {
              Object RESULT =null;
		registrar[2]=false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("u",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // z ::= d COMA z 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("z",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // z ::= d 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("z",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // z ::= error 
            {
              String RESULT =null;
		registrar[3]=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("z",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // d ::= LLAVE_A o COMA o LLAVE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if (registrar[2]){ listadoUnir.add(Double.valueOf(a), Double.valueOf(b));}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("d",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // w ::= j COMA w 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                if(registrar[1] && tipoGrafica[0]) {listadoEjeY.add(Double.valueOf(a));}
                if(registrar[1] && tipoGrafica[1]) {listadoValores.add(Double.valueOf(a));}
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("w",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // w ::= j 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(registrar[1] && tipoGrafica[0]) {listadoEjeY.add(Double.valueOf(a));}
        if(registrar[1] && tipoGrafica[1]) {listadoValores.add(Double.valueOf(a));}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("w",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // v ::= TEXT COMA w 
            {
              String RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        if(registrar[1] && tipoGrafica[0]) {listadoEjeX.add(text.substring(1, text.length()-1));}
                        if(registrar[1] && tipoGrafica[1]) {listadoEtiqueta.add(text.substring(1, text.length()-1));}
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // v ::= TEXT 
            {
              String RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(registrar[1] && tipoGrafica[0]) {listadoEjeX.add(text.substring(1, text.length()-1));}
            if(registrar[1] && tipoGrafica[1]) {listadoEtiqueta.add(text.substring(1, text.length()-1));}
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // v ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // v ::= error 
            {
              String RESULT =null;
		registrar[3]=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$1 ::= 
            {
              Object RESULT =null;
tipoGrafica[0]=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // i ::= DEF BARRAS NT$1 LLAVE_A b i 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("i",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$2 ::= 
            {
              Object RESULT =null;
tipoGrafica[1]=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // i ::= DEF PIE NT$2 LLAVE_A p i 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("i",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // i ::= e 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("i",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // i ::= error i 
            {
              Object RESULT =null;
		registrar[3]=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // e ::= EJECUTAR PARENTESIS_A TEXT PARENTESIS_C PUNTOYCOMA e 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		listarGraficas(text.substring(1, text.length()-1));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // e ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
