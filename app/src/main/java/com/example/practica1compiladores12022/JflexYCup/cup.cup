/*************************************CODE******************************************************/
package com.example.practica1compiladores12022.JflexYCup;

import java_cup.runtime.*;
import java.util.ArrayList;

import com.example.practica1compiladores12022.Array.*;
import com.example.practica1compiladores12022.Grafica.*;
import com.example.practica1compiladores12022.Resportes.ReportesOperadoresMatematicos;

import java.util.ArrayList;


    parser code {:
        
	public parser(Lexema lexer) {
        super(lexer);
        }

        public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        }

        public void unrecovered_syntax_error(Symbol cur_token) {
            if (cur_token.sym == sym.EOF) {
             System.out.println("public void unrecoveredsyntax_error");
            }
        }
   /**
     * ***CODE*******
     */
    private ArrayList<ReportesOperadoresMatematicos> listadoReportesMatemtaicos = new ArrayList<>();
    private ArrayList<Grafica> listadoGrafica = new ArrayList<>();
    //valors para crear graficas
    private ArrayList<String> listadoEjeX = new ArrayList<>(); //if registra[0] == true
    private ArrayList<String> listadoEtiqueta = new ArrayList<>(); //if registra[0] == true
    private ArrayDouble listadoValores = new ArrayDouble();//if registra[1] == true
    private ArrayDouble listadoEjeY = new ArrayDouble();//if registra[1] == true
    private ArrayOrderedPair listadoUnir = new ArrayOrderedPair();//if registra[2] == true
    private boolean[] registrar = {true, true, true};
    private boolean[] tipoGrafica = {false, false};//tipoGrafica[0]=BARRAS , tipoGrafica[1]PIE
    private double total;
    private String titulo;
    private String tipo;
    private String extra;

    //agregar grafica al listado
    private void addGraph() {
        Grafica add = null;
        boolean requisitosBasicos = (!titulo.isEmpty()) && (listadoUnir!=null) && (listadoEjeX!=null | listadoEtiqueta!=null) && (listadoEjeY!=null | listadoValores!=null);
        //add Barra
        if (tipoGrafica[0] & requisitosBasicos) {
            add = new Barras(titulo, listadoUnir, listadoEjeY, listadoEjeX);
        }
        //add Pie
        if (tipoGrafica[1] & requisitosBasicos) {
            int cantidadPorcentaje = (tipo.equalsIgnoreCase("Porcentaje")) ? 0 : (tipo.equalsIgnoreCase("Cantidad")) ? 1 : 2;
            switch ((total == 0 && extra.isEmpty() && cantidadPorcentaje != 2) ? 0 : (total != 0 && extra.isEmpty() && cantidadPorcentaje != 2) ? 1 : (!extra.isEmpty() && total == 0 && cantidadPorcentaje != 2) ? 2 : (cantidadPorcentaje != 2) ? 3 : 4) {
                case 0:
                    add = new Pie((cantidadPorcentaje == 0) ? Pie.posible.PORCENTAJE : Pie.posible.CANTIDAD, titulo, listadoUnir, listadoValores, listadoEtiqueta);
                    break;
                case 1:
                    add = new Pie((cantidadPorcentaje == 0) ? Pie.posible.PORCENTAJE : Pie.posible.CANTIDAD, total, titulo, listadoUnir, listadoValores, listadoEtiqueta);
                    break;
                case 2:
                    add = new Pie((cantidadPorcentaje == 0) ? Pie.posible.PORCENTAJE : Pie.posible.CANTIDAD, extra, titulo, listadoUnir, listadoValores, listadoEtiqueta);
                    break;
                case 3:
                    add = new Pie((cantidadPorcentaje == 0) ? Pie.posible.PORCENTAJE : Pie.posible.CANTIDAD, total, extra, titulo, listadoUnir, listadoValores, listadoEtiqueta);
                    break;
                default:
                    System.out.println("NO SE ENCONTRO NADA PARA AÑADIR AL LISTADO GRAFICA");
                    throw new AssertionError();
            }
        }
        if (add == null) {
            System.out.println("NO SE ENCONTRO NADA PARA AÑADIR AL LISTADO GRAFICA");
        } else {
            listadoGrafica.add(add);
        }
    }
    //En esta parte regresa los atributos a su estado inicial

    private void restoreString() {
        total = 0;
        titulo = null;
        tipo = null;
        extra = null;
        listadoEjeX.clear();
        listadoEjeY.clear();
        listadoValores.clear();
        listadoEtiqueta.clear();
        listadoUnir.clear();
        registrar[0] = true;
        registrar[2] = true;
        registrar[1] = true;
        tipoGrafica[0] = false;
        tipoGrafica[1] = false;
    }
// solo prubas en terminal

    private void printString() {
        System.out.println("**********" + "titulo>>>" + titulo + "*********************************");
        System.out.println("total>>>" + total);
        System.out.println("tipo>>" + tipo);
        System.out.println("extra>>>" + extra);
        System.out.println("listadoEjeX>>>" + listadoEjeX.toString());
        System.out.println("listadoEjeY>>>" + listadoEjeY.toString());
        System.out.println("listadoValores>>>" + listadoValores.toString());
        System.out.println("listadoEtiqueta>>>" + listadoEtiqueta.toString());
        System.out.println("listadoReportesMatemtaicos>>>" + listadoReportesMatemtaicos.toString());
        for (int i = 0; i < listadoGrafica.size(); i++) {
            System.out.println("listadoGrafica>>>" + listadoGrafica.get(i).toString());
        }
        System.out.println("**********************************************************************");
    }

    public ArrayList<ReportesOperadoresMatematicos> getListadoReportesMatemtaicos() {
        return listadoReportesMatemtaicos;
    }

    public ArrayList<Grafica> getListadoGrafica() {
        return listadoGrafica;
    }
    /**
     * ***END CODE*******
     */
:}
/*************************************TERMINALES******************************************************/
terminal DOBLEPUNTO,PUNTOYCOMA,COMA; /*PUNTUACION*/
terminal SUMAR,RESTAR,DIVIDIR,MULTIPLICAR;/*SIMBOLOS DE OPERACION*/
terminal PARENTESIS_A,PARENTESIS_C,CORCHETE_A,CORCHETE_C,LLAVE_A,LLAVE_C;/*AGRUPACION*/
terminal DEF,BARRAS,PIE;/*DEFINIR GRAFICAS*/
terminal TITULO,UNIR,EJECUTAR;/*DETALLES COMPARTIDOS*/
terminal EJEX,EJEY;/*BARRAS*/
terminal ETIQUETAS,VALORES,TIPO,TOTAL,EXTRA;/*PIE*/
terminal String ENTERO,DECIMAL,TEXT; /*DATOS*/
terminal String PORCENTAJE,CANTIDAD;
/*************************************NO TERMINALES******************************************************/
non terminal i; /*terminal donde inicia*/
non terminal p,q,g,a,r,l; /*detalles de pie*/
non terminal b,x,y; /*detalles de barras*/
non terminal u,t,d,e;/*no terminales conpartidos*/
non terminal String o,j;/*para el uso de operaciones aritmeticas*/
non terminal String w,v,z; /*estos no terminales me sirvieron para solucionar 32,23 y texto,text,text*/
/*************************************PRECEDENCIA******************************************************/
precedence left SUMAR, RESTAR;
precedence left MULTIPLICAR, DIVIDIR;
/*************************************GRAMATICA******************************************************/
start with i;
/******operaciones matematicas*****/
j ::= o:a {:
    RESULT = a;
           :}; /*A QUI ESTA EL TOTAL DE LA OPERACION*/
o ::= o:a SUMAR o:b {: 
                    int val1= Integer.parseInt(a);
                    int val2= Integer.parseInt(b);
                    int r = val1+val2;
                    RESULT = String.valueOf(r); 
 listadoReportesMatemtaicos.add(new ReportesOperadoresMatematicos("SUMAR", aleft, aright, "val1 + val2 "));
                    :}

|  o:a RESTAR o:b {: int val1= Integer.parseInt(a);
                    int val2= Integer.parseInt(b);
                    int r = val1-val2;
                    RESULT = String.valueOf(r); 
 listadoReportesMatemtaicos.add(new ReportesOperadoresMatematicos("RESTAR", aleft, aright, "val1 - val2 "));
                    :}

|  o:a DIVIDIR o:b {: int val1= Integer.parseInt(a);
                    int val2= Integer.parseInt(b);
                    int r = val1/val2;
                    RESULT = String.valueOf(r); 
listadoReportesMatemtaicos.add(new ReportesOperadoresMatematicos("DIVIDIR", aleft, aright, "val1 / val2 "));
                    :}

|  o:a MULTIPLICAR o:b {: int val1= Integer.parseInt(a);
                    int val2= Integer.parseInt(b);
                    int r = val1*val2;
                    RESULT = String.valueOf(r); 
listadoReportesMatemtaicos.add(new ReportesOperadoresMatematicos("MULTIPLICAR", aleft, aright, "val1 * val2 "));
                    :}

| PARENTESIS_A o:a {: RESULT = a; :} PARENTESIS_C 
| ENTERO:a {: RESULT = a; :}
| DECIMAL:a {: RESULT = a; :}
;

/***************Detalles de barras***************/
b ::= u b  /*UNIR*/
| t b {::} /*TITULO*/
| x b  /*EJEX*/
| y b  /*EJEY*/
| LLAVE_C {:
            addGraph();
            printString();
            restoreString();
            :}
;
x ::= EJEX DOBLEPUNTO CORCHETE_A  v  CORCHETE_C PUNTOYCOMA {:registrar[0]=false;:}
;
y ::= EJEY DOBLEPUNTO CORCHETE_A  w  CORCHETE_C PUNTOYCOMA {:registrar[1]=false;:}
;
/***************para los detalles de pie***************/
p ::= u p 
| t p {::} /*TITULO*/
| q p  /*ETIQUETA*/
| g p {::} /*TIPO*/
| a p  /*VALORES*/
| r p {::} /*EXTRA*/
| l p {::} /*TOTAL*/
| LLAVE_C {:
            addGraph();
            printString();
            restoreString();
            :}
;
g ::= TIPO DOBLEPUNTO PORCENTAJE:text PUNTOYCOMA  {:tipo=text;:}
| TIPO DOBLEPUNTO CANTIDAD:text PUNTOYCOMA  {:tipo=text;:}
;
q ::= ETIQUETAS DOBLEPUNTO CORCHETE_A  v  CORCHETE_C PUNTOYCOMA {:registrar[0]=false;:}
;
a ::= VALORES DOBLEPUNTO CORCHETE_A w CORCHETE_C PUNTOYCOMA {:registrar[1]=false;:}
;
r ::= EXTRA DOBLEPUNTO  TEXT:text  PUNTOYCOMA  {:extra=text.substring(1, text.length()-1);:}
;
l ::= TOTAL DOBLEPUNTO j:a PUNTOYCOMA {:total=Double.valueOf(a);:} 
;
/***************detalles compartidos***************/
t ::= TITULO DOBLEPUNTO  TEXT:text  PUNTOYCOMA {:titulo=text.substring(1, text.length()-1);:}
;
u ::= UNIR DOBLEPUNTO CORCHETE_A  z CORCHETE_C PUNTOYCOMA {:registrar[2]=false;:}
;
z ::= d COMA z 
| d
;
d ::= LLAVE_A o:a COMA o:b LLAVE_C {:if (registrar[2]){ listadoUnir.add(Double.valueOf(a), Double.valueOf(b));}:}
;
w ::= j:a COMA w {:
                if(registrar[1] && tipoGrafica[0]) {listadoEjeY.add(Double.valueOf(a));}
                if(registrar[1] && tipoGrafica[1]) {listadoValores.add(Double.valueOf(a));}
                  :}
| j:a {:
        if(registrar[1] && tipoGrafica[0]) {listadoEjeY.add(Double.valueOf(a));}
        if(registrar[1] && tipoGrafica[1]) {listadoValores.add(Double.valueOf(a));}
        :}
;
v ::= TEXT:text COMA w {:
                        if(registrar[1] && tipoGrafica[0]) {listadoEjeX.add(text);}
                        if(registrar[1] && tipoGrafica[1]) {listadoEtiqueta.add(text);}
                        :}
| TEXT:text {:
            if(registrar[1] && tipoGrafica[0]) {listadoEjeX.add(text);}
            if(registrar[1] && tipoGrafica[1]) {listadoEtiqueta.add(text);}
            :}
;
/***************INICIO DEL ANALISADOR***************/
i ::= DEF BARRAS {:tipoGrafica[0]=true;:} LLAVE_A b  i 
| DEF PIE {:tipoGrafica[1]=true;:} LLAVE_A p  i
| e 
| error {:System.out.println("¡¡¡¡¡ERROR!!!!");:}
;
e ::= EJECUTAR PARENTESIS_A TEXT:e PARENTESIS_C PUNTOYCOMA e 
| 
;
